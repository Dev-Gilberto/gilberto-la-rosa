globalThis.process ??= {}; globalThis.process.env ??= {};
const id = "comandos-mas-usados-en-git.mdx";
						const collection = "blog";
						const slug = "comandos-mas-usados-en-git";
						const body = "\r\n## Que es Git?\r\n\r\nGit es un potente sistema de control de versiones que permite a los desarrolladores gestionar y rastrear los cambios realizados en su código. Su uso está muy extendido en la industria del desarrollo de software, y conocer los comandos más utilizados en Git es esencial para una gestión eficiente y eficaz del código.\r\n\r\n## El comando de inicio\r\n\r\nUno de los comandos más utilizados en Git es \"git init\". Este comando inicializa un nuevo repositorio Git en el directorio actual, permitiendo a los desarrolladores comenzar el seguimiento de los cambios en su código. Al ejecutar este comando, Git crea una carpeta .git oculta que contiene todos los archivos y datos necesarios para el control de versiones.\r\n\r\nEjemplo: Este comando inicia y crea el archivo oculto .gitignore.\r\n\r\n```sh:\r\ngit init\r\n```\r\n\r\nEsta es una configuración básica del archivo .gitignore para un proyecto de Astro.\r\n\r\n```md:\r\n# build output\r\ndist/\r\n\r\n# generated types\r\n.astro/\r\n\r\n# dependencies\r\nnode_modules/\r\n\r\n# logs\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\npnpm-debug.log*\r\n\r\n# environment variables\r\n.env\r\n.env.production\r\n\r\n# macOS-specific files\r\n.DS_Store\r\n```\r\n\r\n## Agregando archivos y cambios en tu proyecto\r\n\r\nUna vez inicializado un repositorio, los desarrolladores pueden empezar a añadirle archivos mediante el comando \"git add\". Este comando escenifica los cambios realizados en el código, preparándolo para el commit. Especificando el nombre del archivo o directorio después del comando \"git add\", los desarrolladores pueden poner en etapa archivos o directorios específicos. La preparación de los cambios es un paso importante en el flujo de trabajo de Git, ya que permite a los desarrolladores controlar qué cambios se incluyen en una confirmación.\r\n\r\nEjemplo: preparando los cambios para hacer el commit.\r\n\r\n```sh:\r\ngit add .\r\n```\r\n\r\n## Registrando los cambios realizados\r\n\r\nDespués de preparar los cambios, los desarrolladores pueden crear una nueva confirmación utilizando el comando \"git commit\". Un commit representa una instantánea del código en un momento determinado e incluye un mensaje que describe los cambios realizados. Los commits sirven como puntos de control en el proceso de desarrollo, permitiendo a los desarrolladores navegar fácilmente a través de diferentes versiones de su código y volver a estados anteriores si es necesario. El comando \"git commit\" suele ir seguido de la opción \"-m\" para proporcionar un mensaje de confirmación significativo y descriptivo.\r\n\r\nEjemplo: no olvides siempre escribir una descripción exacta de lo que hiciste por si estas trabajando en equipo sea más fácil identificar en lo que trabajaste.\r\n\r\n```sh:\r\ngit commit -m \"Haciendo mi primer commit con git\"\r\n```\r\n\r\n## Trabajando en equipo\r\n\r\nOtro comando muy utilizado en Git es \"git pull\". Este comando recupera los cambios realizados en el repositorio remoto y los fusiona con la rama local. A menudo se utiliza para actualizar el código local con los últimos cambios de otros miembros del equipo o de un repositorio central. Al extraer actualizaciones con regularidad, los desarrolladores pueden asegurarse de que su código local está actualizado y evitar conflictos al fusionar los cambios.\r\n\r\nEjemplo: realiza una fusión o actualización entre los cambios remotos y la rama local.\r\n\r\n```sh:\r\ngit pull\r\n```\r\n\r\n## Creando las populares ramas o bifurcaciones\r\n\r\nLa creación de ramas es otra característica esencial de Git, y el comando \"git branch\" se utiliza con frecuencia para gestionar ramas. Con Git, los desarrolladores pueden crear varias ramas para trabajar en distintas funciones o correcciones de errores de forma independiente. El comando \"git branch\" lista todas las ramas existentes en el repositorio, mientras que el comando \"git branch nombre_de_rama>\" crea una nueva rama con el nombre especificado. Los desarrolladores pueden pasar de una rama a otra mediante el comando \"git checkout\", lo que les permite alternar sin problemas entre distintas tareas.\r\n\r\nEjemplo:\r\n\r\n```sh:\r\ngit branch nombre_de_la_rama\r\n```\r\n\r\nLista todos los archivos los cuales sufrieron una modificación.\r\n\r\n```sh:\r\ngit checkout\r\n```\r\n\r\nAl dia de hoy Git es unos de los controladores de versiones mas utilizados en el mundo de la programación, por ello que es vital aprender a utilizarlo.\r\n";
						const data = {title:"Comandos más utilizados en Git",image:"😎",emojis:"👈 👏",description:"Git es un potente sistema de control de versiones que permite a los desarrolladores gestionar y rastrear los cambios realizados en su código.",pubDate:new Date(1711065600000),author:"Gilberto La Rosa",tags:["#git","#codigo"]};
						const _internal = {
							type: 'content',
							filePath: "C:/Users/Gilberto La Rosa/Desktop/WebSitiesStactics/gilberto-la-rosa/src/content/blog/comandos-mas-usados-en-git.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
